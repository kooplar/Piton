piton is a c like programming language with hints of python.

The project consists in the language specification, a compiler, a
virtual machine, and a debugger. The compiler compiles to a stack 
machine code wich is then fed to the virtual machine. The compiler,
virtual machine, and debugger are all done in C.This project uses no 
external libraires aside from glibc, and all parsing is done in-house 
(no yacc or lex).

This project was for a compiler class I took, but the goal now is to
clean up the code and have a simple example of how to implement an
efficient compiler and virtual machine from scratch.

installation is easy:

cd piton_compiler/src && make

there are some examples of programs you can compile under:
piton_compiler/tests

example:  piton_compiler/src/pitonc piton_compiler/tests/basic_functionality

once compiled, a 'code.eje' file is produced. feed this into the virtual
machine to get it running.


to compile the virtual machine:

cd piton_virtual_machine/src && make

there are some bytecode piton files in piton_virtual_machine/tests
that you can use to feed the virtual machine (or feed it a code.eje
that the compiler creates. Note extension does not matter).

example: cd piton_virtual_machine/src; ./piton ../tests/string_comparison

to run with debug, add a '-d' before the bytecode file:

cd piton_virtual_machine/src; ./piton -d ../tests/string_comparison



please read the README in the piton_compiler and piton_virtual_machine
directories for more info on each program
